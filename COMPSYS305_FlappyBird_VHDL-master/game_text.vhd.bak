LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.all;
USE IEEE.STD_LOGIC_ARITH.all;
USE IEEE.STD_LOGIC_UNSIGNED.all;

ENTITY game_text IS
Generic(ADDR_WIDTH: integer := 12; DATA_WIDTH: integer := 1);
   PORT(SIGNAL sw0							: IN std_logic;
		  SIGNAL Word_Sel						: IN std_logic_vector(1 DOWNTO 0);
		  SIGNAL pixel_column, pixel_row	: IN std_logic_vector(10 DOWNTO 0);
		  SIGNAL score_in						: IN std_logic_vector(7 DOWNTO 0);
		  SIGNAL char_add						: OUT std_logic_vector(5 DOWNTO 0);
		  SIGNAL char_row, char_col		: OUT std_logic_vector(2 DOWNTO 0));
END game_text;

architecture behavior of game_text is

-- Video Display Signals   
SIGNAL pixel_row_t, pixel_column_t		: std_logic_vector(10 DOWNTO 0);
SIGNAL tens, ones 							: std_logic_vector(5 downto 0);
SIGNAL score_tens, score_ones 			: std_logic_vector(3 downto 0);

BEGIN           

pixel_column_t <= pixel_column;
pixel_row_t <= pixel_row;

score_ones <= score_in(3 downto 0);
score_tens <= score_in(7 downto 4);

Digit_process : process (score_in)
BEGIN
	case score_ones is
		when "0000" => ones <= CONV_STD_LOGIC_VECTOR(48, 6); -- 0
		when "0001" => ones <= CONV_STD_LOGIC_VECTOR(49, 6); -- 1
		when "0010" => ones <= CONV_STD_LOGIC_VECTOR(50, 6); -- 2
		when "0011" => ones <= CONV_STD_LOGIC_VECTOR(51, 6); -- 3
		when "0100" => ones <= CONV_STD_LOGIC_VECTOR(52, 6); -- 4
		when "0101" => ones <= CONV_STD_LOGIC_VECTOR(53, 6); -- 5
		when "0110" => ones <= CONV_STD_LOGIC_VECTOR(54, 6); -- 6
		when "0111" => ones <= CONV_STD_LOGIC_VECTOR(55, 6); -- 7
		when "1000" => ones <= CONV_STD_LOGIC_VECTOR(56, 6); -- 8
		when "1001" => ones <= CONV_STD_LOGIC_VECTOR(57, 6); -- 9
		when OTHERS => ones <= CONV_STD_LOGIC_VECTOR(48, 6); -- 0
	end case;
	case score_tens is
		when "0000" => tens <= CONV_STD_LOGIC_VECTOR(48, 6); -- 0
		when "0001" => tens <= CONV_STD_LOGIC_VECTOR(49, 6); -- 1
		when "0010" => tens <= CONV_STD_LOGIC_VECTOR(50, 6); -- 2
		when "0011" => tens <= CONV_STD_LOGIC_VECTOR(51, 6); -- 3
		when "0100" => tens <= CONV_STD_LOGIC_VECTOR(52, 6); -- 4
		when "0101" => tens <= CONV_STD_LOGIC_VECTOR(53, 6); -- 5
		when "0110" => tens <= CONV_STD_LOGIC_VECTOR(54, 6); -- 6
		when "0111" => tens <= CONV_STD_LOGIC_VECTOR(55, 6); -- 7
		when "1000" => tens <= CONV_STD_LOGIC_VECTOR(56, 6); -- 8
		when "1001" => tens <= CONV_STD_LOGIC_VECTOR(57, 6); -- 9
		when OTHERS => tens <= CONV_STD_LOGIC_VECTOR(48, 6); -- 0
	end case;
END process;


TEXT_Display: process (pixel_column_t, pixel_row_t, sw0)
BEGIN
		
		--WELCOME state
		IF (Word_Sel = "00") THEN
		--Display FLASHY BALL
		--F
		IF (pixel_column_t >= CONV_STD_LOGIC_VECTOR(128, 10)) AND
			(pixel_column_t <= CONV_STD_LOGIC_VECTOR(160, 10)) AND
			(pixel_row_t >= CONV_STD_LOGIC_VECTOR(96, 10)) AND
			(pixel_row_t <= CONV_STD_LOGIC_VECTOR(127, 10)) THEN
			char_row <= pixel_row_t(4 DOWNTO 2);
			char_col <= pixel_column_t(4 DOWNTO 2);
			char_add <= CONV_STD_LOGIC_VECTOR(6, 6);
		--L
		ELSIF (pixel_column_t >= CONV_STD_LOGIC_VECTOR(160, 10)) AND
			(pixel_column_t <= CONV_STD_LOGIC_VECTOR(192, 10)) AND
			(pixel_row_t >= CONV_STD_LOGIC_VECTOR(96, 10)) AND
			(pixel_row_t <= CONV_STD_LOGIC_VECTOR(127, 10)) THEN
			char_row <= pixel_row_t(4 DOWNTO 2);
			char_col <= pixel_column_t(4 DOWNTO 2);
			char_add <= CONV_STD_LOGIC_VECTOR(12, 6);
		--A
		ELSIF (pixel_column_t >= CONV_STD_LOGIC_VECTOR(192, 10)) AND
			(pixel_column_t <= CONV_STD_LOGIC_VECTOR(224, 10)) AND
			(pixel_row_t >= CONV_STD_LOGIC_VECTOR(96, 10)) AND
			(pixel_row_t <= CONV_STD_LOGIC_VECTOR(127, 10)) THEN
			char_row <= pixel_row_t(4 DOWNTO 2);
			char_col <= pixel_column_t(4 DOWNTO 2);
			char_add <= CONV_STD_LOGIC_VECTOR(1, 6);
		--S
		ELSIF (pixel_column_t >= CONV_STD_LOGIC_VECTOR(224, 10)) AND
			(pixel_column_t <= CONV_STD_LOGIC_VECTOR(256, 10)) AND
			(pixel_row_t >= CONV_STD_LOGIC_VECTOR(96, 10)) AND
			(pixel_row_t <= CONV_STD_LOGIC_VECTOR(127, 10)) THEN
			char_row <= pixel_row_t(4 DOWNTO 2);
			char_col <= pixel_column_t(4 DOWNTO 2);
			char_add <= CONV_STD_LOGIC_VECTOR(19, 6);
		--H
		ELSIF (pixel_column_t >= CONV_STD_LOGIC_VECTOR(256, 10)) AND
			(pixel_column_t <= CONV_STD_LOGIC_VECTOR(288, 10)) AND
			(pixel_row_t >= CONV_STD_LOGIC_VECTOR(96, 10)) AND
			(pixel_row_t <= CONV_STD_LOGIC_VECTOR(127, 10)) THEN
			char_row <= pixel_row_t(4 DOWNTO 2);
			char_col <= pixel_column_t(4 DOWNTO 2);
			char_add <= CONV_STD_LOGIC_VECTOR(8, 6);
		--Y
		ELSIF (pixel_column_t >= CONV_STD_LOGIC_VECTOR(288, 10)) AND
			(pixel_column_t <= CONV_STD_LOGIC_VECTOR(320, 10)) AND
			(pixel_row_t >= CONV_STD_LOGIC_VECTOR(96, 10)) AND
			(pixel_row_t <= CONV_STD_LOGIC_VECTOR(127, 10)) THEN
			char_row <= pixel_row_t(4 DOWNTO 2);
			char_col <= pixel_column_t(4 DOWNTO 2);
			char_add <= CONV_STD_LOGIC_VECTOR(25, 6);
		--B
		ELSIF (pixel_column_t >= CONV_STD_LOGIC_VECTOR(352, 10)) AND
			(pixel_column_t <= CONV_STD_LOGIC_VECTOR(384, 10)) AND
			(pixel_row_t >= CONV_STD_LOGIC_VECTOR(96, 10)) AND
			(pixel_row_t <= CONV_STD_LOGIC_VECTOR(127, 10)) THEN
			char_row <= pixel_row_t(4 DOWNTO 2);
			char_col <= pixel_column_t(4 DOWNTO 2);
			char_add <= CONV_STD_LOGIC_VECTOR(2, 6);
		--A
		ELSIF (pixel_column_t >= CONV_STD_LOGIC_VECTOR(384, 10)) AND
			(pixel_column_t <= CONV_STD_LOGIC_VECTOR(416, 10)) AND
			(pixel_row_t >= CONV_STD_LOGIC_VECTOR(96, 10)) AND
			(pixel_row_t <= CONV_STD_LOGIC_VECTOR(127, 10)) THEN
			char_row <= pixel_row_t(4 DOWNTO 2);
			char_col <= pixel_column_t(4 DOWNTO 2);
			char_add <= CONV_STD_LOGIC_VECTOR(1, 6);
		--L
		ELSIF (pixel_column_t >= CONV_STD_LOGIC_VECTOR(416, 10)) AND
			(pixel_column_t <= CONV_STD_LOGIC_VECTOR(448, 10)) AND
			(pixel_row_t >= CONV_STD_LOGIC_VECTOR(96, 10)) AND
			(pixel_row_t <= CONV_STD_LOGIC_VECTOR(127, 10)) THEN
			char_row <= pixel_row_t(4 DOWNTO 2);
			char_col <= pixel_column_t(4 DOWNTO 2);
			char_add <= CONV_STD_LOGIC_VECTOR(12, 6);
		--L
		ELSIF (pixel_column_t >= CONV_STD_LOGIC_VECTOR(448, 10)) AND
			(pixel_column_t <= CONV_STD_LOGIC_VECTOR(480, 10)) AND
			(pixel_row_t >= CONV_STD_LOGIC_VECTOR(96, 10)) AND
			(pixel_row_t <= CONV_STD_LOGIC_VECTOR(127, 10)) THEN
			char_row <= pixel_row_t(4 DOWNTO 2);
			char_col <= pixel_column_t(4 DOWNTO 2);
			char_add <= CONV_STD_LOGIC_VECTOR(12, 6);
		--GAME	
		--G
		ELSIF (pixel_column_t >= CONV_STD_LOGIC_VECTOR(464, 10)) AND
			(pixel_column_t <= CONV_STD_LOGIC_VECTOR(480, 10)) AND
			(pixel_row_t >= CONV_STD_LOGIC_VECTOR(336, 10)) AND
			(pixel_row_t <= CONV_STD_LOGIC_VECTOR(351, 10)) THEN
			char_row <= pixel_row_t(3 DOWNTO 1);
			char_col <= pixel_column_t(3 DOWNTO 1);
			char_add <= CONV_STD_LOGIC_VECTOR(7, 6);
		--A
		ELSIF (pixel_column_t >= CONV_STD_LOGIC_VECTOR(480, 10)) AND
			(pixel_column_t <= CONV_STD_LOGIC_VECTOR(496, 10)) AND
			(pixel_row_t >= CONV_STD_LOGIC_VECTOR(336, 10)) AND
			(pixel_row_t <= CONV_STD_LOGIC_VECTOR(351, 10)) THEN
			char_row <= pixel_row_t(3 DOWNTO 1);
			char_col <= pixel_column_t(3 DOWNTO 1);
			char_add <= CONV_STD_LOGIC_VECTOR(1, 6);
		--M
		ELSIF (pixel_column_t >= CONV_STD_LOGIC_VECTOR(496, 10)) AND
			(pixel_column_t <= CONV_STD_LOGIC_VECTOR(512, 10)) AND
			(pixel_row_t >= CONV_STD_LOGIC_VECTOR(336, 10)) AND
			(pixel_row_t <= CONV_STD_LOGIC_VECTOR(351, 10)) THEN
			char_row <= pixel_row_t(3 DOWNTO 1);
			char_col <= pixel_column_t(3 DOWNTO 1);
			char_add <= CONV_STD_LOGIC_VECTOR(13, 6);
		--E
		ELSIF (pixel_column_t >= CONV_STD_LOGIC_VECTOR(512, 10)) AND
			(pixel_column_t <= CONV_STD_LOGIC_VECTOR(528, 10)) AND
			(pixel_row_t >= CONV_STD_LOGIC_VECTOR(336, 10)) AND
			(pixel_row_t <= CONV_STD_LOGIC_VECTOR(351, 10)) THEN
			char_row <= pixel_row_t(3 DOWNTO 1);
			char_col <= pixel_column_t(3 DOWNTO 1);
			char_add <= CONV_STD_LOGIC_VECTOR(5, 6);
		--PRACTICE	
		--P
		ELSIF (pixel_column_t >= CONV_STD_LOGIC_VECTOR(464, 10)) AND
			(pixel_column_t <= CONV_STD_LOGIC_VECTOR(480, 10)) AND
			(pixel_row_t >= CONV_STD_LOGIC_VECTOR(352, 10)) AND
			(pixel_row_t <= CONV_STD_LOGIC_VECTOR(367, 10)) THEN
			char_row <= pixel_row_t(3 DOWNTO 1);
			char_col <= pixel_column_t(3 DOWNTO 1);
			char_add <= CONV_STD_LOGIC_VECTOR(16, 6);
		--R
		ELSIF (pixel_column_t >= CONV_STD_LOGIC_VECTOR(480, 10)) AND
			(pixel_column_t <= CONV_STD_LOGIC_VECTOR(496, 10)) AND
			(pixel_row_t >= CONV_STD_LOGIC_VECTOR(352, 10)) AND
			(pixel_row_t <= CONV_STD_LOGIC_VECTOR(367, 10)) THEN
			char_row <= pixel_row_t(3 DOWNTO 1);
			char_col <= pixel_column_t(3 DOWNTO 1);
			char_add <= CONV_STD_LOGIC_VECTOR(18, 6);
		--A
		ELSIF (pixel_column_t >= CONV_STD_LOGIC_VECTOR(496, 10)) AND
			(pixel_column_t <= CONV_STD_LOGIC_VECTOR(512, 10)) AND
			(pixel_row_t >= CONV_STD_LOGIC_VECTOR(352, 10)) AND
			(pixel_row_t <= CONV_STD_LOGIC_VECTOR(367, 10)) THEN
			char_row <= pixel_row_t(3 DOWNTO 1);
			char_col <= pixel_column_t(3 DOWNTO 1);
			char_add <= CONV_STD_LOGIC_VECTOR(1, 6);
		--C
		ELSIF (pixel_column_t >= CONV_STD_LOGIC_VECTOR(512, 10)) AND
			(pixel_column_t <= CONV_STD_LOGIC_VECTOR(528, 10)) AND
			(pixel_row_t >= CONV_STD_LOGIC_VECTOR(352, 10)) AND
			(pixel_row_t <= CONV_STD_LOGIC_VECTOR(367, 10)) THEN
			char_row <= pixel_row_t(3 DOWNTO 1);
			char_col <= pixel_column_t(3 DOWNTO 1);
			char_add <= CONV_STD_LOGIC_VECTOR(3, 6);
		--T
		ELSIF (pixel_column_t >= CONV_STD_LOGIC_VECTOR(528, 10)) AND
			(pixel_column_t <= CONV_STD_LOGIC_VECTOR(544, 10)) AND
			(pixel_row_t >= CONV_STD_LOGIC_VECTOR(352, 10)) AND
			(pixel_row_t <= CONV_STD_LOGIC_VECTOR(367, 10)) THEN
			char_row <= pixel_row_t(3 DOWNTO 1);
			char_col <= pixel_column_t(3 DOWNTO 1);
			char_add <= CONV_STD_LOGIC_VECTOR(20, 6);
		--I
		ELSIF (pixel_column_t >= CONV_STD_LOGIC_VECTOR(544, 10)) AND
			(pixel_column_t <= CONV_STD_LOGIC_VECTOR(560, 10)) AND
			(pixel_row_t >= CONV_STD_LOGIC_VECTOR(352, 10)) AND
			(pixel_row_t <= CONV_STD_LOGIC_VECTOR(367, 10)) THEN
			char_row <= pixel_row_t(3 DOWNTO 1);
			char_col <= pixel_column_t(3 DOWNTO 1);
			char_add <= CONV_STD_LOGIC_VECTOR(9, 6);
		--C
		ELSIF (pixel_column_t >= CONV_STD_LOGIC_VECTOR(560, 10)) AND
			(pixel_column_t <= CONV_STD_LOGIC_VECTOR(576, 10)) AND
			(pixel_row_t >= CONV_STD_LOGIC_VECTOR(352, 10)) AND
			(pixel_row_t <= CONV_STD_LOGIC_VECTOR(367, 10)) THEN
			char_row <= pixel_row_t(3 DOWNTO 1);
			char_col <= pixel_column_t(3 DOWNTO 1);
			char_add <= CONV_STD_LOGIC_VECTOR(3, 6);
		--E
		ELSIF (pixel_column_t >= CONV_STD_LOGIC_VECTOR(576, 10)) AND
			(pixel_column_t <= CONV_STD_LOGIC_VECTOR(592, 10)) AND
			(pixel_row_t >= CONV_STD_LOGIC_VECTOR(352, 10)) AND
			(pixel_row_t <= CONV_STD_LOGIC_VECTOR(367, 10)) THEN
			char_row <= pixel_row_t(3 DOWNTO 1);
			char_col <= pixel_column_t(3 DOWNTO 1);
			char_add <= CONV_STD_LOGIC_VECTOR(5, 6);
		--GAME SEL
		ELSIF (pixel_column_t >= CONV_STD_LOGIC_VECTOR(448, 10)) AND
			(pixel_column_t <= CONV_STD_LOGIC_VECTOR(464, 10)) AND
			(pixel_row_t >= CONV_STD_LOGIC_VECTOR(336, 10)) AND
			(pixel_row_t <= CONV_STD_LOGIC_VECTOR(351, 10)) AND
			(sw0 = '1') THEN
			char_row <= pixel_row_t(3 DOWNTO 1);
			char_col <= pixel_column_t(3 DOWNTO 1);
			char_add <= CONV_STD_LOGIC_VECTOR(31, 6);
		--PRACTICE SEL
		ELSIF (pixel_column_t >= CONV_STD_LOGIC_VECTOR(448, 10)) AND
			(pixel_column_t <= CONV_STD_LOGIC_VECTOR(464, 10)) AND
			(pixel_row_t >= CONV_STD_LOGIC_VECTOR(352, 10)) AND
			(pixel_row_t <= CONV_STD_LOGIC_VECTOR(367, 10)) AND
			(sw0 = '0') THEN
			char_row <= pixel_row_t(3 DOWNTO 1);
			char_col <= pixel_column_t(3 DOWNTO 1);
			char_add <= CONV_STD_LOGIC_VECTOR(31, 6);
		--No Text
		ELSE
			char_row <= pixel_row_t(3 DOWNTO 1);
			char_col <= pixel_column_t(3 DOWNTO 1);
			char_add <= CONV_STD_LOGIC_VECTOR(32, 6);
		END IF;
	END IF;
	
	--GAME state
	IF (Word_Sel = "01") THEN
		--Display SCORE
		--S
		IF (pixel_column_t >= CONV_STD_LOGIC_VECTOR(16, 10)) AND
			(pixel_column_t <= CONV_STD_LOGIC_VECTOR(32, 10)) AND
			(pixel_row_t >= CONV_STD_LOGIC_VECTOR(16, 10)) AND
			(pixel_row_t <= CONV_STD_LOGIC_VECTOR(31, 10)) THEN
			char_row <= pixel_row_t(3 DOWNTO 1);
			char_col <= pixel_column_t(3 DOWNTO 1);
			char_add <= CONV_STD_LOGIC_VECTOR(19, 6);
		--C
		ELSIF (pixel_column_t >= CONV_STD_LOGIC_VECTOR(32, 10)) AND
			(pixel_column_t <= CONV_STD_LOGIC_VECTOR(48, 10)) AND
			(pixel_row_t >= CONV_STD_LOGIC_VECTOR(16, 10)) AND
			(pixel_row_t <= CONV_STD_LOGIC_VECTOR(31, 10)) THEN
			char_row <= pixel_row_t(3 DOWNTO 1);
			char_col <= pixel_column_t(3 DOWNTO 1);
			char_add <= CONV_STD_LOGIC_VECTOR(3, 6);
		--O
		ELSIF (pixel_column_t >= CONV_STD_LOGIC_VECTOR(48, 10)) AND
			(pixel_column_t <= CONV_STD_LOGIC_VECTOR(64, 10)) AND
			(pixel_row_t >= CONV_STD_LOGIC_VECTOR(16, 10)) AND
			(pixel_row_t <= CONV_STD_LOGIC_VECTOR(31, 10)) THEN
			char_row <= pixel_row_t(3 DOWNTO 1);
			char_col <= pixel_column_t(3 DOWNTO 1);
			char_add <= CONV_STD_LOGIC_VECTOR(15, 6);
		--R
		ELSIF (pixel_column_t >= CONV_STD_LOGIC_VECTOR(64, 10)) AND
			(pixel_column_t <= CONV_STD_LOGIC_VECTOR(80, 10)) AND
			(pixel_row_t >= CONV_STD_LOGIC_VECTOR(16, 10)) AND
			(pixel_row_t <= CONV_STD_LOGIC_VECTOR(31, 10)) THEN
			char_row <= pixel_row_t(3 DOWNTO 1);
			char_col <= pixel_column_t(3 DOWNTO 1);
			char_add <= CONV_STD_LOGIC_VECTOR(18, 6);
		--E
		ELSIF (pixel_column_t >= CONV_STD_LOGIC_VECTOR(80, 10)) AND
			(pixel_column_t <= CONV_STD_LOGIC_VECTOR(96, 10)) AND
			(pixel_row_t >= CONV_STD_LOGIC_VECTOR(16, 10)) AND
			(pixel_row_t <= CONV_STD_LOGIC_VECTOR(31, 10)) THEN
			char_row <= pixel_row_t(3 DOWNTO 1);
			char_col <= pixel_column_t(3 DOWNTO 1);
			char_add <= CONV_STD_LOGIC_VECTOR(5, 6);
		--DIGIT 1
		ELSIF (pixel_column_t >= CONV_STD_LOGIC_VECTOR(112, 10)) AND
			(pixel_column_t <= CONV_STD_LOGIC_VECTOR(128, 10)) AND
			(pixel_row_t >= CONV_STD_LOGIC_VECTOR(16, 10)) AND
			(pixel_row_t <= CONV_STD_LOGIC_VECTOR(31, 10)) THEN
			char_row <= pixel_row_t(3 DOWNTO 1);
			char_col <= pixel_column_t(3 DOWNTO 1);
			char_add <= tens;
		--DIGIT 2
		ELSIF (pixel_column_t >= CONV_STD_LOGIC_VECTOR(128, 10)) AND
			(pixel_column_t <= CONV_STD_LOGIC_VECTOR(144, 10)) AND
			(pixel_row_t >= CONV_STD_LOGIC_VECTOR(16, 10)) AND
			(pixel_row_t <= CONV_STD_LOGIC_VECTOR(31, 10)) THEN
			char_row <= pixel_row_t(3 DOWNTO 1);
			char_col <= pixel_column_t(3 DOWNTO 1);
			char_add <= ones;
		--G
		ELSIF (pixel_column_t >= CONV_STD_LOGIC_VECTOR(528, 10)) AND
			(pixel_column_t <= CONV_STD_LOGIC_VECTOR(544, 10)) AND
			(pixel_row_t >= CONV_STD_LOGIC_VECTOR(16, 10)) AND
			(pixel_row_t <= CONV_STD_LOGIC_VECTOR(31, 10)) THEN
			char_row <= pixel_row_t(3 DOWNTO 1);
			char_col <= pixel_column_t(3 DOWNTO 1);
			char_add <= CONV_STD_LOGIC_VECTOR(7, 6);
		--A
		ELSIF (pixel_column_t >= CONV_STD_LOGIC_VECTOR(544, 10)) AND
			(pixel_column_t <= CONV_STD_LOGIC_VECTOR(560, 10)) AND
			(pixel_row_t >= CONV_STD_LOGIC_VECTOR(16, 10)) AND
			(pixel_row_t <= CONV_STD_LOGIC_VECTOR(31, 10)) THEN
			char_row <= pixel_row_t(3 DOWNTO 1);
			char_col <= pixel_column_t(3 DOWNTO 1);
			char_add <= CONV_STD_LOGIC_VECTOR(1, 6);
		--M
		ELSIF (pixel_column_t >= CONV_STD_LOGIC_VECTOR(560, 10)) AND
			(pixel_column_t <= CONV_STD_LOGIC_VECTOR(576, 10)) AND
			(pixel_row_t >= CONV_STD_LOGIC_VECTOR(16, 10)) AND
			(pixel_row_t <= CONV_STD_LOGIC_VECTOR(31, 10)) THEN
			char_row <= pixel_row_t(3 DOWNTO 1);
			char_col <= pixel_column_t(3 DOWNTO 1);
			char_add <= CONV_STD_LOGIC_VECTOR(13, 6);
		--E
		ELSIF (pixel_column_t >= CONV_STD_LOGIC_VECTOR(576, 10)) AND
			(pixel_column_t <= CONV_STD_LOGIC_VECTOR(592, 10)) AND
			(pixel_row_t >= CONV_STD_LOGIC_VECTOR(16, 10)) AND
			(pixel_row_t <= CONV_STD_LOGIC_VECTOR(31, 10)) THEN
			char_row <= pixel_row_t(3 DOWNTO 1);
			char_col <= pixel_column_t(3 DOWNTO 1);
			char_add <= CONV_STD_LOGIC_VECTOR(5, 6);
		--No Text
		ELSE
			char_row <= pixel_row_t(3 DOWNTO 1);
			char_col <= pixel_column_t(3 DOWNTO 1);
			char_add <= CONV_STD_LOGIC_VECTOR(32, 6);
		END IF;
	END IF;
	
	--PRACTICE state
	IF (Word_Sel = "10") THEN
		--Display SCORE
		--S
		IF (pixel_column_t >= CONV_STD_LOGIC_VECTOR(16, 10)) AND
			(pixel_column_t <= CONV_STD_LOGIC_VECTOR(32, 10)) AND
			(pixel_row_t >= CONV_STD_LOGIC_VECTOR(16, 10)) AND
			(pixel_row_t <= CONV_STD_LOGIC_VECTOR(31, 10)) THEN
			char_row <= pixel_row_t(3 DOWNTO 1);
			char_col <= pixel_column_t(3 DOWNTO 1);
			char_add <= CONV_STD_LOGIC_VECTOR(19, 6);
		--C
		ELSIF (pixel_column_t >= CONV_STD_LOGIC_VECTOR(32, 10)) AND
			(pixel_column_t <= CONV_STD_LOGIC_VECTOR(48, 10)) AND
			(pixel_row_t >= CONV_STD_LOGIC_VECTOR(16, 10)) AND
			(pixel_row_t <= CONV_STD_LOGIC_VECTOR(31, 10)) THEN
			char_row <= pixel_row_t(3 DOWNTO 1);
			char_col <= pixel_column_t(3 DOWNTO 1);
			char_add <= CONV_STD_LOGIC_VECTOR(3, 6);
		--O
		ELSIF (pixel_column_t >= CONV_STD_LOGIC_VECTOR(48, 10)) AND
			(pixel_column_t <= CONV_STD_LOGIC_VECTOR(64, 10)) AND
			(pixel_row_t >= CONV_STD_LOGIC_VECTOR(16, 10)) AND
			(pixel_row_t <= CONV_STD_LOGIC_VECTOR(31, 10)) THEN
			char_row <= pixel_row_t(3 DOWNTO 1);
			char_col <= pixel_column_t(3 DOWNTO 1);
			char_add <= CONV_STD_LOGIC_VECTOR(15, 6);
		--R
		ELSIF (pixel_column_t >= CONV_STD_LOGIC_VECTOR(64, 10)) AND
			(pixel_column_t <= CONV_STD_LOGIC_VECTOR(80, 10)) AND
			(pixel_row_t >= CONV_STD_LOGIC_VECTOR(16, 10)) AND
			(pixel_row_t <= CONV_STD_LOGIC_VECTOR(31, 10)) THEN
			char_row <= pixel_row_t(3 DOWNTO 1);
			char_col <= pixel_column_t(3 DOWNTO 1);
			char_add <= CONV_STD_LOGIC_VECTOR(18, 6);
		--E
		ELSIF (pixel_column_t >= CONV_STD_LOGIC_VECTOR(80, 10)) AND
			(pixel_column_t <= CONV_STD_LOGIC_VECTOR(96, 10)) AND
			(pixel_row_t >= CONV_STD_LOGIC_VECTOR(16, 10)) AND
			(pixel_row_t <= CONV_STD_LOGIC_VECTOR(31, 10)) THEN
			char_row <= pixel_row_t(3 DOWNTO 1);
			char_col <= pixel_column_t(3 DOWNTO 1);
			char_add <= CONV_STD_LOGIC_VECTOR(5, 6);
		--DIGIT 1
		ELSIF (pixel_column_t >= CONV_STD_LOGIC_VECTOR(112, 10)) AND
			(pixel_column_t <= CONV_STD_LOGIC_VECTOR(128, 10)) AND
			(pixel_row_t >= CONV_STD_LOGIC_VECTOR(16, 10)) AND
			(pixel_row_t <= CONV_STD_LOGIC_VECTOR(31, 10)) THEN
			char_row <= pixel_row_t(3 DOWNTO 1);
			char_col <= pixel_column_t(3 DOWNTO 1);
			char_add <= tens;
		--DIGIT 2
		ELSIF (pixel_column_t >= CONV_STD_LOGIC_VECTOR(128, 10)) AND
			(pixel_column_t <= CONV_STD_LOGIC_VECTOR(144, 10)) AND
			(pixel_row_t >= CONV_STD_LOGIC_VECTOR(16, 10)) AND
			(pixel_row_t <= CONV_STD_LOGIC_VECTOR(31, 10)) THEN
			char_row <= pixel_row_t(3 DOWNTO 1);
			char_col <= pixel_column_t(3 DOWNTO 1);
			char_add <= ones;
		--Display PRACTICE
		--P
		ELSIF (pixel_column_t >= CONV_STD_LOGIC_VECTOR(464, 10)) AND
			(pixel_column_t <= CONV_STD_LOGIC_VECTOR(480, 10)) AND
			(pixel_row_t >= CONV_STD_LOGIC_VECTOR(16, 10)) AND
			(pixel_row_t <= CONV_STD_LOGIC_VECTOR(31, 10)) THEN
			char_row <= pixel_row_t(3 DOWNTO 1);
			char_col <= pixel_column_t(3 DOWNTO 1);
			char_add <= CONV_STD_LOGIC_VECTOR(16, 6);
		--R
		ELSIF (pixel_column_t >= CONV_STD_LOGIC_VECTOR(480, 10)) AND
			(pixel_column_t <= CONV_STD_LOGIC_VECTOR(496, 10)) AND
			(pixel_row_t >= CONV_STD_LOGIC_VECTOR(16, 10)) AND
			(pixel_row_t <= CONV_STD_LOGIC_VECTOR(31, 10)) THEN
			char_row <= pixel_row_t(3 DOWNTO 1);
			char_col <= pixel_column_t(3 DOWNTO 1);
			char_add <= CONV_STD_LOGIC_VECTOR(18, 6);
		--A
		ELSIF (pixel_column_t >= CONV_STD_LOGIC_VECTOR(496, 10)) AND
			(pixel_column_t <= CONV_STD_LOGIC_VECTOR(512, 10)) AND
			(pixel_row_t >= CONV_STD_LOGIC_VECTOR(16, 10)) AND
			(pixel_row_t <= CONV_STD_LOGIC_VECTOR(31, 10)) THEN
			char_row <= pixel_row_t(3 DOWNTO 1);
			char_col <= pixel_column_t(3 DOWNTO 1);
			char_add <= CONV_STD_LOGIC_VECTOR(1, 6);
		--C
		ELSIF (pixel_column_t >= CONV_STD_LOGIC_VECTOR(512, 10)) AND
			(pixel_column_t <= CONV_STD_LOGIC_VECTOR(528, 10)) AND
			(pixel_row_t >= CONV_STD_LOGIC_VECTOR(16, 10)) AND
			(pixel_row_t <= CONV_STD_LOGIC_VECTOR(31, 10)) THEN
			char_row <= pixel_row_t(3 DOWNTO 1);
			char_col <= pixel_column_t(3 DOWNTO 1);
			char_add <= CONV_STD_LOGIC_VECTOR(3, 6);
		--T
		ELSIF (pixel_column_t >= CONV_STD_LOGIC_VECTOR(528, 10)) AND
			(pixel_column_t <= CONV_STD_LOGIC_VECTOR(544, 10)) AND
			(pixel_row_t >= CONV_STD_LOGIC_VECTOR(16, 10)) AND
			(pixel_row_t <= CONV_STD_LOGIC_VECTOR(31, 10)) THEN
			char_row <= pixel_row_t(3 DOWNTO 1);
			char_col <= pixel_column_t(3 DOWNTO 1);
			char_add <= CONV_STD_LOGIC_VECTOR(20, 6);
		--I
		ELSIF (pixel_column_t >= CONV_STD_LOGIC_VECTOR(544, 10)) AND
			(pixel_column_t <= CONV_STD_LOGIC_VECTOR(560, 10)) AND
			(pixel_row_t >= CONV_STD_LOGIC_VECTOR(16, 10)) AND
			(pixel_row_t <= CONV_STD_LOGIC_VECTOR(31, 10)) THEN
			char_row <= pixel_row_t(3 DOWNTO 1);
			char_col <= pixel_column_t(3 DOWNTO 1);
			char_add <= CONV_STD_LOGIC_VECTOR(9, 6);
		--C
		ELSIF (pixel_column_t >= CONV_STD_LOGIC_VECTOR(560, 10)) AND
			(pixel_column_t <= CONV_STD_LOGIC_VECTOR(576, 10)) AND
			(pixel_row_t >= CONV_STD_LOGIC_VECTOR(16, 10)) AND
			(pixel_row_t <= CONV_STD_LOGIC_VECTOR(31, 10)) THEN
			char_row <= pixel_row_t(3 DOWNTO 1);
			char_col <= pixel_column_t(3 DOWNTO 1);
			char_add <= CONV_STD_LOGIC_VECTOR(3, 6);
		--E
		ELSIF (pixel_column_t >= CONV_STD_LOGIC_VECTOR(576, 10)) AND
			(pixel_column_t <= CONV_STD_LOGIC_VECTOR(592, 10)) AND
			(pixel_row_t >= CONV_STD_LOGIC_VECTOR(16, 10)) AND
			(pixel_row_t <= CONV_STD_LOGIC_VECTOR(31, 10)) THEN
			char_row <= pixel_row_t(3 DOWNTO 1);
			char_col <= pixel_column_t(3 DOWNTO 1);
			char_add <= CONV_STD_LOGIC_VECTOR(5, 6);
		--Display BT1 TO EXIT
		--B
		ELSIF (pixel_column_t >= CONV_STD_LOGIC_VECTOR(464, 10)) AND
			(pixel_column_t <= CONV_STD_LOGIC_VECTOR(480, 10)) AND
			(pixel_row_t >= CONV_STD_LOGIC_VECTOR(464, 10)) AND
			(pixel_row_t <= CONV_STD_LOGIC_VECTOR(480, 10)) THEN
			char_row <= pixel_row_t(3 DOWNTO 1);
			char_col <= pixel_column_t(3 DOWNTO 1);
			char_add <= CONV_STD_LOGIC_VECTOR(2, 6);
		--T
		ELSIF (pixel_column_t >= CONV_STD_LOGIC_VECTOR(480, 10)) AND
			(pixel_column_t <= CONV_STD_LOGIC_VECTOR(496, 10)) AND
			(pixel_row_t >= CONV_STD_LOGIC_VECTOR(464, 10)) AND
			(pixel_row_t <= CONV_STD_LOGIC_VECTOR(480, 10)) THEN
			char_row <= pixel_row_t(3 DOWNTO 1);
			char_col <= pixel_column_t(3 DOWNTO 1);
			char_add <= CONV_STD_LOGIC_VECTOR(20, 6);
		--1
		ELSIF (pixel_column_t >= CONV_STD_LOGIC_VECTOR(496, 10)) AND
			(pixel_column_t <= CONV_STD_LOGIC_VECTOR(512, 10)) AND
			(pixel_row_t >= CONV_STD_LOGIC_VECTOR(464, 10)) AND
			(pixel_row_t <= CONV_STD_LOGIC_VECTOR(480, 10)) THEN
			char_row <= pixel_row_t(3 DOWNTO 1);
			char_col <= pixel_column_t(3 DOWNTO 1);
			char_add <= CONV_STD_LOGIC_VECTOR(49, 6);
		--T
		ELSIF (pixel_column_t >= CONV_STD_LOGIC_VECTOR(528, 10)) AND
			(pixel_column_t <= CONV_STD_LOGIC_VECTOR(544, 10)) AND
			(pixel_row_t >= CONV_STD_LOGIC_VECTOR(464, 10)) AND
			(pixel_row_t <= CONV_STD_LOGIC_VECTOR(480, 10)) THEN
			char_row <= pixel_row_t(3 DOWNTO 1);
			char_col <= pixel_column_t(3 DOWNTO 1);
			char_add <= CONV_STD_LOGIC_VECTOR(20, 6);
		--O
		ELSIF (pixel_column_t >= CONV_STD_LOGIC_VECTOR(544, 10)) AND
			(pixel_column_t <= CONV_STD_LOGIC_VECTOR(560, 10)) AND
			(pixel_row_t >= CONV_STD_LOGIC_VECTOR(464, 10)) AND
			(pixel_row_t <= CONV_STD_LOGIC_VECTOR(480, 10)) THEN
			char_row <= pixel_row_t(3 DOWNTO 1);
			char_col <= pixel_column_t(3 DOWNTO 1);
			char_add <= CONV_STD_LOGIC_VECTOR(15, 6);
		--E
		ELSIF (pixel_column_t >= CONV_STD_LOGIC_VECTOR(576, 10)) AND
			(pixel_column_t <= CONV_STD_LOGIC_VECTOR(592, 10)) AND
			(pixel_row_t >= CONV_STD_LOGIC_VECTOR(464, 10)) AND
			(pixel_row_t <= CONV_STD_LOGIC_VECTOR(480, 10)) THEN
			char_row <= pixel_row_t(3 DOWNTO 1);
			char_col <= pixel_column_t(3 DOWNTO 1);
			char_add <= CONV_STD_LOGIC_VECTOR(5, 6);
		--X
		ELSIF (pixel_column_t >= CONV_STD_LOGIC_VECTOR(592, 10)) AND
			(pixel_column_t <= CONV_STD_LOGIC_VECTOR(608, 10)) AND
			(pixel_row_t >= CONV_STD_LOGIC_VECTOR(464, 10)) AND
			(pixel_row_t <= CONV_STD_LOGIC_VECTOR(480, 10)) THEN
			char_row <= pixel_row_t(3 DOWNTO 1);
			char_col <= pixel_column_t(3 DOWNTO 1);
			char_add <= CONV_STD_LOGIC_VECTOR(24, 6);
		--I
		ELSIF (pixel_column_t >= CONV_STD_LOGIC_VECTOR(608, 10)) AND
			(pixel_column_t <= CONV_STD_LOGIC_VECTOR(624, 10)) AND
			(pixel_row_t >= CONV_STD_LOGIC_VECTOR(464, 10)) AND
			(pixel_row_t <= CONV_STD_LOGIC_VECTOR(480, 10)) THEN
			char_row <= pixel_row_t(3 DOWNTO 1);
			char_col <= pixel_column_t(3 DOWNTO 1);
			char_add <= CONV_STD_LOGIC_VECTOR(9, 6);
		--T
		ELSIF (pixel_column_t >= CONV_STD_LOGIC_VECTOR(624, 10)) AND
			(pixel_column_t <= CONV_STD_LOGIC_VECTOR(640, 10)) AND
			(pixel_row_t >= CONV_STD_LOGIC_VECTOR(464, 10)) AND
			(pixel_row_t <= CONV_STD_LOGIC_VECTOR(480, 10)) THEN
			char_row <= pixel_row_t(3 DOWNTO 1);
			char_col <= pixel_column_t(3 DOWNTO 1);
			char_add <= CONV_STD_LOGIC_VECTOR(20, 6);
		--No Text
		ELSE
			char_row <= pixel_row_t(3 DOWNTO 1);
			char_col <= pixel_column_t(3 DOWNTO 1);
			char_add <= CONV_STD_LOGIC_VECTOR(32, 6);
		END IF;
	END IF;
	
	--GAME_END state
	IF (Word_Sel = "11") THEN
		--Display THE END
		--T
		IF (pixel_column_t >= CONV_STD_LOGIC_VECTOR(224, 10)) AND
			(pixel_column_t <= CONV_STD_LOGIC_VECTOR(256, 10)) AND
			(pixel_row_t >= CONV_STD_LOGIC_VECTOR(224, 10)) AND
			(pixel_row_t <= CONV_STD_LOGIC_VECTOR(255, 10)) THEN
			char_row <= pixel_row_t(4 DOWNTO 2);
			char_col <= pixel_column_t(4 DOWNTO 2);
			char_add <= CONV_STD_LOGIC_VECTOR(20, 6);
		--H
		ELSIF (pixel_column_t >= CONV_STD_LOGIC_VECTOR(256, 10)) AND
			(pixel_column_t <= CONV_STD_LOGIC_VECTOR(288, 10)) AND
			(pixel_row_t >= CONV_STD_LOGIC_VECTOR(224, 10)) AND
			(pixel_row_t <= CONV_STD_LOGIC_VECTOR(255, 10)) THEN
			char_row <= pixel_row_t(4 DOWNTO 2);
			char_col <= pixel_column_t(4 DOWNTO 2);
			char_add <= CONV_STD_LOGIC_VECTOR(8, 6);
		--E
		ELSIF (pixel_column_t >= CONV_STD_LOGIC_VECTOR(288, 10)) AND
			(pixel_column_t <= CONV_STD_LOGIC_VECTOR(320, 10)) AND
			(pixel_row_t >= CONV_STD_LOGIC_VECTOR(224, 10)) AND
			(pixel_row_t <= CONV_STD_LOGIC_VECTOR(255, 10)) THEN
			char_row <= pixel_row_t(4 DOWNTO 2);
			char_col <= pixel_column_t(4 DOWNTO 2);
			char_add <= CONV_STD_LOGIC_VECTOR(5, 6);
		--E
		ELSIF (pixel_column_t >= CONV_STD_LOGIC_VECTOR(352, 10)) AND
			(pixel_column_t <= CONV_STD_LOGIC_VECTOR(384, 10)) AND
			(pixel_row_t >= CONV_STD_LOGIC_VECTOR(224, 10)) AND
			(pixel_row_t <= CONV_STD_LOGIC_VECTOR(255, 10)) THEN
			char_row <= pixel_row_t(4 DOWNTO 2);
			char_col <= pixel_column_t(4 DOWNTO 2);
			char_add <= CONV_STD_LOGIC_VECTOR(5, 6);
		--N
		ELSIF (pixel_column_t >= CONV_STD_LOGIC_VECTOR(384, 10)) AND
			(pixel_column_t <= CONV_STD_LOGIC_VECTOR(416, 10)) AND
			(pixel_row_t >= CONV_STD_LOGIC_VECTOR(224, 10)) AND
			(pixel_row_t <= CONV_STD_LOGIC_VECTOR(255, 10)) THEN
			char_row <= pixel_row_t(4 DOWNTO 2);
			char_col <= pixel_column_t(4 DOWNTO 2);
			char_add <= CONV_STD_LOGIC_VECTOR(14, 6);
		--D
		ELSIF (pixel_column_t >= CONV_STD_LOGIC_VECTOR(416, 10)) AND
			(pixel_column_t <= CONV_STD_LOGIC_VECTOR(448, 10)) AND
			(pixel_row_t >= CONV_STD_LOGIC_VECTOR(224, 10)) AND
			(pixel_row_t <= CONV_STD_LOGIC_VECTOR(255, 10)) THEN
			char_row <= pixel_row_t(4 DOWNTO 2);
			char_col <= pixel_column_t(4 DOWNTO 2);
			char_add <= CONV_STD_LOGIC_VECTOR(4, 6);
		--Display PRESS BT0
		--P
		ELSIF (pixel_column_t >= CONV_STD_LOGIC_VECTOR(256, 10)) AND
			(pixel_column_t <= CONV_STD_LOGIC_VECTOR(272, 10)) AND
			(pixel_row_t >= CONV_STD_LOGIC_VECTOR(304, 10)) AND
			(pixel_row_t <= CONV_STD_LOGIC_VECTOR(319, 10)) THEN
			char_row <= pixel_row_t(3 DOWNTO 1);
			char_col <= pixel_column_t(3 DOWNTO 1);
			char_add <= CONV_STD_LOGIC_VECTOR(16, 6);
		--R
		ELSIF (pixel_column_t >= CONV_STD_LOGIC_VECTOR(272, 10)) AND
			(pixel_column_t <= CONV_STD_LOGIC_VECTOR(288, 10)) AND
			(pixel_row_t >= CONV_STD_LOGIC_VECTOR(304, 10)) AND
			(pixel_row_t <= CONV_STD_LOGIC_VECTOR(319, 10)) THEN
			char_row <= pixel_row_t(3 DOWNTO 1);
			char_col <= pixel_column_t(3 DOWNTO 1);
			char_add <= CONV_STD_LOGIC_VECTOR(18, 6);
		--E
		ELSIF (pixel_column_t >= CONV_STD_LOGIC_VECTOR(288, 10)) AND
			(pixel_column_t <= CONV_STD_LOGIC_VECTOR(304, 10)) AND
			(pixel_row_t >= CONV_STD_LOGIC_VECTOR(304, 10)) AND
			(pixel_row_t <= CONV_STD_LOGIC_VECTOR(319, 10)) THEN
			char_row <= pixel_row_t(3 DOWNTO 1);
			char_col <= pixel_column_t(3 DOWNTO 1);
			char_add <= CONV_STD_LOGIC_VECTOR(5, 6);
		--S
		ELSIF (pixel_column_t >= CONV_STD_LOGIC_VECTOR(304, 10)) AND
			(pixel_column_t <= CONV_STD_LOGIC_VECTOR(320, 10)) AND
			(pixel_row_t >= CONV_STD_LOGIC_VECTOR(304, 10)) AND
			(pixel_row_t <= CONV_STD_LOGIC_VECTOR(319, 10)) THEN
			char_row <= pixel_row_t(3 DOWNTO 1);
			char_col <= pixel_column_t(3 DOWNTO 1);
			char_add <= CONV_STD_LOGIC_VECTOR(19, 6);
		--S
		ELSIF (pixel_column_t >= CONV_STD_LOGIC_VECTOR(320, 10)) AND
			(pixel_column_t <= CONV_STD_LOGIC_VECTOR(336, 10)) AND
			(pixel_row_t >= CONV_STD_LOGIC_VECTOR(304, 10)) AND
			(pixel_row_t <= CONV_STD_LOGIC_VECTOR(319, 10)) THEN
			char_row <= pixel_row_t(3 DOWNTO 1);
			char_col <= pixel_column_t(3 DOWNTO 1);
			char_add <= CONV_STD_LOGIC_VECTOR(19, 6);
		--B
		ELSIF (pixel_column_t >= CONV_STD_LOGIC_VECTOR(352, 10)) AND
			(pixel_column_t <= CONV_STD_LOGIC_VECTOR(368, 10)) AND
			(pixel_row_t >= CONV_STD_LOGIC_VECTOR(304, 10)) AND
			(pixel_row_t <= CONV_STD_LOGIC_VECTOR(319, 10)) THEN
			char_row <= pixel_row_t(3 DOWNTO 1);
			char_col <= pixel_column_t(3 DOWNTO 1);
			char_add <= CONV_STD_LOGIC_VECTOR(2, 6);
		--T
		ELSIF (pixel_column_t >= CONV_STD_LOGIC_VECTOR(368, 10)) AND
			(pixel_column_t <= CONV_STD_LOGIC_VECTOR(384, 10)) AND
			(pixel_row_t >= CONV_STD_LOGIC_VECTOR(304, 10)) AND
			(pixel_row_t <= CONV_STD_LOGIC_VECTOR(319, 10)) THEN
			char_row <= pixel_row_t(3 DOWNTO 1);
			char_col <= pixel_column_t(3 DOWNTO 1);
			char_add <= CONV_STD_LOGIC_VECTOR(20, 6);
		--0
		ELSIF (pixel_column_t >= CONV_STD_LOGIC_VECTOR(384, 10)) AND
			(pixel_column_t <= CONV_STD_LOGIC_VECTOR(400, 10)) AND
			(pixel_row_t >= CONV_STD_LOGIC_VECTOR(304, 10)) AND
			(pixel_row_t <= CONV_STD_LOGIC_VECTOR(319, 10)) THEN
			char_row <= pixel_row_t(3 DOWNTO 1);
			char_col <= pixel_column_t(3 DOWNTO 1);
			char_add <= CONV_STD_LOGIC_VECTOR(48, 6);
		--No Text
		ELSE
			char_row <= pixel_row_t(3 DOWNTO 1);
			char_col <= pixel_column_t(3 DOWNTO 1);
			char_add <= CONV_STD_LOGIC_VECTOR(32, 6);
		END IF;
	END IF;
	
END process TEXT_Display;
	
END behavior;